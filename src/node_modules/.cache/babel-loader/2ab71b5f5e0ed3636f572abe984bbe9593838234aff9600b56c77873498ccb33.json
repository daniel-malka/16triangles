{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\circles\\\\Circles.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Circles = _ref => {\n  _s();\n  let {\n    size,\n    canvasRef\n  } = _ref;\n  const minRadius = 5;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = size > 1440 ? size / 4 : size < 800 ? size / 2 : size < 600 && size - 20;\n    canvas.height = size > 1440 ? size / 4 : size < 800 ? size / 2 : size < 600 && size - 20;\n    const totalCircles = 2000;\n    const createCircleAttempts = 500;\n    const widthX = size;\n    const heightY = size;\n    const maxRadius = widthX / 4;\n    const doesCircleHaveACollision = circle => {\n      // Check for collision with other circles\n      for (let i = 0; i < circles.length; i++) {\n        let otherCircle = circles[i];\n        let a = circle.radius + otherCircle.radius / 4 * 1.976;\n        let x = circle.x - otherCircle.x;\n        let y = circle.y - otherCircle.y;\n        if (a >= Math.sqrt(x * x + y * y)) {\n          return true;\n        }\n      }\n\n      // Check for collision with canvas boundaries\n      if (circle.x + circle.radius >= widthX - 15 || circle.x - circle.radius <= 0) {\n        return true;\n      }\n      if (circle.y + circle.radius >= heightY - 15 || circle.y - circle.radius <= 0) {\n        return true;\n      }\n      return false;\n    };\n    const createAndDrawCircle = () => {\n      let newCircle;\n      let circleSafeToDraw = false;\n      for (let tries = 0; tries < createCircleAttempts; tries++) {\n        newCircle = {\n          x: Math.random() * (widthX - 30) + 15,\n          y: Math.random() * (heightY - 30) + 15,\n          radius: minRadius\n        };\n        if (doesCircleHaveACollision(newCircle)) {\n          continue;\n        } else {\n          circleSafeToDraw = true;\n          break;\n        }\n      }\n      if (!circleSafeToDraw) {\n        return;\n      }\n      for (let radiusSize = minRadius; radiusSize <= maxRadius; radiusSize++) {\n        newCircle.radius = radiusSize;\n        if (doesCircleHaveACollision(newCircle)) {\n          newCircle.radius--;\n          break;\n        }\n      }\n      circles.push(newCircle);\n      ctx.beginPath();\n      ctx.arc(newCircle.x, newCircle.y, newCircle.radius, 0, 2 * Math.PI);\n      ctx.closePath();\n      ctx.fill();\n    };\n    let circles = [];\n    const drawCircles = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (isClicked) {\n        circles = [];\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        for (let i = 0; i < totalCircles; i++) {\n          createAndDrawCircle();\n        }\n      }\n    };\n    drawCircles();\n  }, [canvasRef, size]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 10\n  }, this);\n};\n_s(Circles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Circles;\nexport default Circles;\nvar _c;\n$RefreshReg$(_c, \"Circles\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Circles","_ref","_s","size","canvasRef","minRadius","canvas","current","ctx","getContext","width","height","totalCircles","createCircleAttempts","widthX","heightY","maxRadius","doesCircleHaveACollision","circle","i","circles","length","otherCircle","a","radius","x","y","Math","sqrt","createAndDrawCircle","newCircle","circleSafeToDraw","tries","random","radiusSize","push","beginPath","arc","PI","closePath","fill","drawCircles","clearRect","isClicked","fillStyle","fillRect","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/circles/Circles.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst Circles = ({ size, canvasRef }) => {\r\n  const minRadius = 5;\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = size > 1440 ? size / 4 : size < 800 ? size / 2 : size < 600 && size - 20;\r\n    canvas.height = size > 1440 ? size / 4 : size < 800 ? size / 2 : size < 600 && size - 20;\r\n\r\n    const totalCircles = 2000;\r\n    const createCircleAttempts = 500;\r\n    const widthX = size;\r\n    const heightY = size;\r\n    const maxRadius = widthX / 4;\r\n\r\n    const doesCircleHaveACollision = (circle) => {\r\n      // Check for collision with other circles\r\n      for (let i = 0; i < circles.length; i++) {\r\n        let otherCircle = circles[i];\r\n        let a = circle.radius + (otherCircle.radius / 4) * 1.976;\r\n        let x = circle.x - otherCircle.x;\r\n        let y = circle.y - otherCircle.y;\r\n\r\n        if (a >= Math.sqrt(x * x + y * y)) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // Check for collision with canvas boundaries\r\n      if (circle.x + circle.radius >= widthX - 15 || circle.x - circle.radius <= 0) {\r\n        return true;\r\n      }\r\n\r\n      if (circle.y + circle.radius >= heightY - 15 || circle.y - circle.radius <= 0) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    const createAndDrawCircle = () => {\r\n      let newCircle;\r\n      let circleSafeToDraw = false;\r\n\r\n      for (let tries = 0; tries < createCircleAttempts; tries++) {\r\n        newCircle = {\r\n          x: Math.random() * (widthX - 30) + 15,\r\n          y: Math.random() * (heightY - 30) + 15,\r\n          radius: minRadius,\r\n        };\r\n\r\n        if (doesCircleHaveACollision(newCircle)) {\r\n          continue;\r\n        } else {\r\n          circleSafeToDraw = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!circleSafeToDraw) {\r\n        return;\r\n      }\r\n\r\n      for (let radiusSize = minRadius; radiusSize <= maxRadius; radiusSize++) {\r\n        newCircle.radius = radiusSize;\r\n        if (doesCircleHaveACollision(newCircle)) {\r\n          newCircle.radius--;\r\n          break;\r\n        }\r\n      }\r\n\r\n      circles.push(newCircle);\r\n      ctx.beginPath();\r\n      ctx.arc(newCircle.x, newCircle.y, newCircle.radius, 0, 2 * Math.PI);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    };\r\n\r\n    let circles = [];\r\n\r\n    const drawCircles = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      if (isClicked) {\r\n        circles = [];\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        for (let i = 0; i < totalCircles; i++) {\r\n          createAndDrawCircle();\r\n        }\r\n      }\r\n    };\r\n\r\n    drawCircles();\r\n  }, [canvasRef, size]);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Circles;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
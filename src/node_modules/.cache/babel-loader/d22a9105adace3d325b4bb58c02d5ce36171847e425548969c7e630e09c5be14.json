{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\circles\\\\Circles.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport generateUniqueRandomNumbers from '../../utilities/functions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Circles = _ref => {\n  _s();\n  let {\n    size,\n    canvasRef,\n    isClicked,\n    bgColors,\n    strokeColor,\n    strokeWidth\n  } = _ref;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const numColors = bgColors.length;\n    let numbers2 = generateUniqueRandomNumbers(0, 1, 2);\n    let numbers3 = generateUniqueRandomNumbers(0, 2, 3);\n    let numbers4 = generateUniqueRandomNumbers(0, 3, 4);\n    let coin = Math.random();\n    const minRadius = 2;\n    canvas.width = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 && size - 20;\n    canvas.height = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 && size - 20;\n    const drawCircles = () => {\n      const totalCircles = 3000;\n      let createCircleAttempts = 2000;\n      const widthX = canvas.width;\n      const circles = [];\n      if (numColors === 1) {\n        ctx.fillStyle = bgColors[0];\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      } else if (numColors === 2) {\n        const halfWidth = widthX / 2;\n        ctx.fillStyle = bgColors[numbers2[0]];\n        ctx.fillRect(0, 0, halfWidth, widthX);\n        ctx.fillStyle = bgColors[numbers2[1]];\n        ctx.fillRect(halfWidth, 0, halfWidth, widthX);\n      } else if (numColors === 3) {\n        const thirdWidth = canvas.width / 3;\n        if (coin > 0.5) {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\n        } else if (coin <= 0.5) {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, widthX, thirdWidth);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(0, thirdWidth, widthX, thirdWidth);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(0, 2 * thirdWidth, widthX, thirdWidth);\n        }\n      } else if (numColors === 4) {\n        const quarter = widthX / 2;\n        ctx.fillStyle = bgColors[numbers4[0]];\n        ctx.fillRect(0, 0, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[1]];\n        ctx.fillRect(quarter, 0, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[2]];\n        ctx.fillRect(0, quarter, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[3]];\n        ctx.fillRect(quarter, quarter, quarter, quarter);\n      }\n      ctx.lineWidth = strokeWidth;\n      const draw = () => {\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const data = imageData.data;\n        circles.forEach(circle => {\n          const x = Math.round(circle.x);\n          const y = Math.round(circle.y);\n          const radius = Math.round(circle.radius);\n\n          // Calculate the index of the pixel (x, y) in the pixel data array\n          const pixelIndex = (y * imageData.width + x) * 4;\n\n          // Get the RGB values of the pixel\n          const red = data[pixelIndex];\n          const green = data[pixelIndex + 1];\n          const blue = data[pixelIndex + 2];\n\n          // Calculate the brightness value of the pixel (average of RGB values)\n          const brightness = (red + green + blue) / 3;\n\n          // Determine the fill color based on the brightness value\n          let fillStyle;\n          if (brightness < 128) {\n            fillStyle = 'white'; // Flip to white if background is black\n          } else {\n            fillStyle = 'black'; // Flip to black if background is white\n          }\n\n          ctx.beginPath();\n          ctx.arc(x, y, radius, 0, 2 * Math.PI);\n          ctx.strokeStyle = strokeColor;\n          ctx.fillStyle = fillStyle;\n          ctx.stroke();\n          ctx.fill();\n        });\n      };\n      const doesCircleHaveACollision = circle => {\n        for (let i = 0; i < circles.length; i++) {\n          const existingCircle = circles[i];\n          const dx = circle.x - existingCircle.x;\n          const dy = circle.y - existingCircle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance <= circle.radius + existingCircle.radius) {\n            return true;\n          }\n        }\n        return false;\n      };\n      const createCircle = () => {\n        const x = Math.random() * widthX;\n        const y = Math.random() * widthX;\n        const radius = Math.random() * (widthX / 3 - minRadius);\n        const newCircle = {\n          x,\n          y,\n          radius\n        };\n        if (doesCircleHaveACollision(newCircle)) {\n          if (createCircleAttempts > 0) {\n            createCircleAttempts--;\n            createCircle();\n          }\n          return;\n        }\n        circles.push(newCircle);\n      };\n      for (let i = 0; i < totalCircles; i++) {\n        createCircle();\n      }\n      draw();\n    };\n    drawCircles();\n  }, [isClicked]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 10\n  }, this);\n};\n_s(Circles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Circles;\nexport default Circles;\nvar _c;\n$RefreshReg$(_c, \"Circles\");","map":{"version":3,"names":["React","useEffect","generateUniqueRandomNumbers","jsxDEV","_jsxDEV","Circles","_ref","_s","size","canvasRef","isClicked","bgColors","strokeColor","strokeWidth","canvas","current","ctx","getContext","numColors","length","numbers2","numbers3","numbers4","coin","Math","random","minRadius","width","height","drawCircles","totalCircles","createCircleAttempts","widthX","circles","fillStyle","fillRect","halfWidth","thirdWidth","quarter","lineWidth","draw","imageData","getImageData","data","forEach","circle","x","round","y","radius","pixelIndex","red","green","blue","brightness","beginPath","arc","PI","strokeStyle","stroke","fill","doesCircleHaveACollision","i","existingCircle","dx","dy","distance","sqrt","createCircle","newCircle","push","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/circles/Circles.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport generateUniqueRandomNumbers from '../../utilities/functions';\r\n\r\nconst Circles = ({ size, canvasRef, isClicked, bgColors, strokeColor, strokeWidth }) => {\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const numColors = bgColors.length;\r\n\r\n    let numbers2 = generateUniqueRandomNumbers(0, 1, 2);\r\n    let numbers3 = generateUniqueRandomNumbers(0, 2, 3);\r\n    let numbers4 = generateUniqueRandomNumbers(0, 3, 4);\r\n    let coin = Math.random();\r\n    const minRadius = 2;\r\n\r\n    canvas.width = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 && size - 20;\r\n    canvas.height = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 && size - 20;\r\n\r\n    const drawCircles = () => {\r\n      const totalCircles = 3000;\r\n      let createCircleAttempts = 2000;\r\n      const widthX = canvas.width;\r\n      const circles = [];\r\n\r\n      if (numColors === 1) {\r\n        ctx.fillStyle = bgColors[0];\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      } else if (numColors === 2) {\r\n        const halfWidth = widthX / 2;\r\n        ctx.fillStyle = bgColors[numbers2[0]];\r\n        ctx.fillRect(0, 0, halfWidth, widthX);\r\n        ctx.fillStyle = bgColors[numbers2[1]];\r\n        ctx.fillRect(halfWidth, 0, halfWidth, widthX);\r\n      } else if (numColors === 3) {\r\n        const thirdWidth = canvas.width / 3;\r\n        if (coin > 0.5) {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\r\n        } else if (coin <= 0.5) {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, widthX, thirdWidth);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(0, thirdWidth, widthX, thirdWidth);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(0, 2 * thirdWidth, widthX, thirdWidth);\r\n        }\r\n      } else if (numColors === 4) {\r\n        const quarter = widthX / 2;\r\n        ctx.fillStyle = bgColors[numbers4[0]];\r\n        ctx.fillRect(0, 0, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[1]];\r\n        ctx.fillRect(quarter, 0, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[2]];\r\n        ctx.fillRect(0, quarter, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[3]];\r\n        ctx.fillRect(quarter, quarter, quarter, quarter);\r\n      }\r\n\r\n      ctx.lineWidth = strokeWidth;\r\n\r\n      const draw = () => {\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const data = imageData.data;\r\n\r\n        circles.forEach((circle) => {\r\n          const x = Math.round(circle.x);\r\n          const y = Math.round(circle.y);\r\n          const radius = Math.round(circle.radius);\r\n\r\n          // Calculate the index of the pixel (x, y) in the pixel data array\r\n          const pixelIndex = (y * imageData.width + x) * 4;\r\n\r\n          // Get the RGB values of the pixel\r\n          const red = data[pixelIndex];\r\n          const green = data[pixelIndex + 1];\r\n          const blue = data[pixelIndex + 2];\r\n\r\n          // Calculate the brightness value of the pixel (average of RGB values)\r\n          const brightness = (red + green + blue) / 3;\r\n\r\n          // Determine the fill color based on the brightness value\r\n          let fillStyle;\r\n          if (brightness < 128) {\r\n            fillStyle = 'white'; // Flip to white if background is black\r\n          } else {\r\n            fillStyle = 'black'; // Flip to black if background is white\r\n          }\r\n\r\n          ctx.beginPath();\r\n          ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n          ctx.strokeStyle = strokeColor;\r\n          ctx.fillStyle = fillStyle;\r\n          ctx.stroke();\r\n          ctx.fill();\r\n        });\r\n      };\r\n\r\n      const doesCircleHaveACollision = (circle) => {\r\n        for (let i = 0; i < circles.length; i++) {\r\n          const existingCircle = circles[i];\r\n          const dx = circle.x - existingCircle.x;\r\n          const dy = circle.y - existingCircle.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          if (distance <= circle.radius + existingCircle.radius) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n\r\n      const createCircle = () => {\r\n        const x = Math.random() * widthX;\r\n        const y = Math.random() * widthX;\r\n        const radius = Math.random() * (widthX / 3 - minRadius);\r\n\r\n        const newCircle = { x, y, radius };\r\n\r\n        if (doesCircleHaveACollision(newCircle)) {\r\n          if (createCircleAttempts > 0) {\r\n            createCircleAttempts--;\r\n            createCircle();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        circles.push(newCircle);\r\n      };\r\n\r\n      for (let i = 0; i < totalCircles; i++) {\r\n        createCircle();\r\n      }\r\n\r\n      draw();\r\n    };\r\n\r\n    drawCircles();\r\n  }, [isClicked]);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Circles;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
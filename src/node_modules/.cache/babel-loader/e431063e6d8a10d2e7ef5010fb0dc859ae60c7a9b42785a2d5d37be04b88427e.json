{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\TerrainAnimation\\\\TerrainAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport p5 from 'p5';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TerrainAnimation = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    let canvas;\n    const sketch = p => {\n      let terrain = [];\n      let flying = 0.0;\n      let scl = 20; // Controls the scale of the terrain\n      let cols, rows;\n      p.setup = () => {\n        canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);\n        canvas.parent(canvasRef.current);\n        canvas.style('position', 'absolute');\n        canvas.style('top', '0');\n        canvas.style('left', '0');\n        canvas.style('z-index', '-1');\n\n        // Calculate the number of columns and rows based on canvas size and scale\n        cols = Math.floor(p.width / scl);\n        rows = Math.floor(p.height / scl);\n\n        // Initialize terrain array\n        for (let x = 0; x < cols; x++) {\n          terrain[x] = [];\n        }\n        p.noFill();\n      };\n      p.draw = () => {\n        // Clear the canvas\n        p.background(0);\n\n        // Update the flying variable to control the terrain generation\n        flying -= 0.1;\n        let yoff = flying;\n        for (let y = 0; y < rows; y++) {\n          let xoff = 0;\n          for (let x = 0; x < cols; x++) {\n            // Use the noise function to generate the height of each vertex\n            terrain[x][y] = p.map(p.noise(xoff, yoff), 0, 1, -100, 100);\n            xoff += 0.2;\n          }\n          yoff += 0.2;\n        }\n\n        // Set up the camera and lighting for 3D rendering\n        p.rotateX(p.PI / 3);\n        p.translate(-p.width / 2, -p.height / 2);\n        p.stroke(255);\n        p.ambientLight(100);\n        p.directionalLight(255, 255, 255, 0, 0, 1);\n\n        // Render the terrain using lines\n        for (let y = 0; y < rows - 1; y++) {\n          p.beginShape(p.LINES);\n          for (let x = 0; x < cols; x++) {\n            // Calculate the vertices' positions\n            p.vertex(x * scl, y * scl, terrain[x][y]);\n            p.vertex(x * scl, (y + 1) * scl, terrain[x][y + 1]);\n          }\n          p.endShape();\n        }\n      };\n      p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\n        cols = Math.floor(p.width / scl);\n        rows = Math.floor(p.height / scl);\n      };\n    };\n    const terrainSketch = new p5(sketch);\n    return () => {\n      terrainSketch.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: canvasRef,\n    className: \"terrain-animation\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s(TerrainAnimation, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = TerrainAnimation;\nexport default TerrainAnimation;\nvar _c;\n$RefreshReg$(_c, \"TerrainAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","p5","jsxDEV","_jsxDEV","TerrainAnimation","_s","canvasRef","canvas","sketch","p","terrain","flying","scl","cols","rows","setup","createCanvas","windowWidth","windowHeight","WEBGL","parent","current","style","Math","floor","width","height","x","noFill","draw","background","yoff","y","xoff","map","noise","rotateX","PI","translate","stroke","ambientLight","directionalLight","beginShape","LINES","vertex","endShape","windowResized","resizeCanvas","terrainSketch","remove","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/TerrainAnimation/TerrainAnimation.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport p5 from 'p5';\r\n\r\nconst TerrainAnimation = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let canvas;\r\n\r\n    const sketch = (p) => {\r\n      let terrain = [];\r\n      let flying = 0.0;\r\n      let scl = 20; // Controls the scale of the terrain\r\n      let cols, rows;\r\n\r\n      p.setup = () => {\r\n        canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);\r\n        canvas.parent(canvasRef.current);\r\n        canvas.style('position', 'absolute');\r\n        canvas.style('top', '0');\r\n        canvas.style('left', '0');\r\n        canvas.style('z-index', '-1');\r\n\r\n        // Calculate the number of columns and rows based on canvas size and scale\r\n        cols = Math.floor(p.width / scl);\r\n        rows = Math.floor(p.height / scl);\r\n\r\n        // Initialize terrain array\r\n        for (let x = 0; x < cols; x++) {\r\n          terrain[x] = [];\r\n        }\r\n\r\n        p.noFill();\r\n      };\r\n\r\n      p.draw = () => {\r\n        // Clear the canvas\r\n        p.background(0);\r\n\r\n        // Update the flying variable to control the terrain generation\r\n        flying -= 0.1;\r\n\r\n        let yoff = flying;\r\n        for (let y = 0; y < rows; y++) {\r\n          let xoff = 0;\r\n          for (let x = 0; x < cols; x++) {\r\n            // Use the noise function to generate the height of each vertex\r\n            terrain[x][y] = p.map(p.noise(xoff, yoff), 0, 1, -100, 100);\r\n            xoff += 0.2;\r\n          }\r\n          yoff += 0.2;\r\n        }\r\n\r\n        // Set up the camera and lighting for 3D rendering\r\n        p.rotateX(p.PI / 3);\r\n        p.translate(-p.width / 2, -p.height / 2);\r\n        p.stroke(255);\r\n        p.ambientLight(100);\r\n        p.directionalLight(255, 255, 255, 0, 0, 1);\r\n\r\n        // Render the terrain using lines\r\n        for (let y = 0; y < rows - 1; y++) {\r\n          p.beginShape(p.LINES);\r\n          for (let x = 0; x < cols; x++) {\r\n            // Calculate the vertices' positions\r\n            p.vertex(x * scl, y * scl, terrain[x][y]);\r\n            p.vertex(x * scl, (y + 1) * scl, terrain[x][y + 1]);\r\n          }\r\n          p.endShape();\r\n        }\r\n      };\r\n\r\n      p.windowResized = () => {\r\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\r\n        cols = Math.floor(p.width / scl);\r\n        rows = Math.floor(p.height / scl);\r\n      };\r\n    };\r\n\r\n    const terrainSketch = new p5(sketch);\r\n\r\n    return () => {\r\n      terrainSketch.remove();\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={canvasRef} className=\"terrain-animation\" />;\r\n};\r\n\r\nexport default TerrainAnimation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
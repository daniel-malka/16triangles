{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\circles\\\\Circles.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport seriously from 'seriously';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nim;\nconst Circles = _ref => {\n  _s();\n  let {\n    size,\n    canvasRef,\n    isClicked,\n    bgColors\n  } = _ref;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const numColors = bgColors.length;\n    let numbers2 = generateUniqueRandomNumbers(0, 1, 2);\n    let numbers3 = generateUniqueRandomNumbers(0, 2, 3);\n    let numbers4 = generateUniqueRandomNumbers(0, 3, 4);\n    let coin = Math.random();\n    const minRadius = 2;\n    canvas.width = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 ? size - 20 : size;\n    canvas.height = canvas.width;\n    const seriouslyInstance = seriously();\n    const drawCircles = () => {\n      const totalCircles = 3000;\n      let createCircleAttempts = 2000;\n      const widthX = canvas.width;\n      const circles = [];\n      if (numColors === 1) {\n        ctx.fillStyle = bgColors[0];\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      } else if (numColors === 2) {\n        const halfWidth = widthX / 2;\n        ctx.fillStyle = bgColors[numbers2[0]];\n        ctx.fillRect(0, 0, halfWidth, widthX);\n        ctx.fillStyle = bgColors[numbers2[1]];\n        ctx.fillRect(halfWidth, 0, halfWidth, widthX);\n      } else if (numColors === 3) {\n        const thirdWidth = canvas.width / 3;\n        if (coin > 0.5) {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\n        } else {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, widthX, thirdWidth);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(0, thirdWidth, widthX, thirdWidth);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(0, 2 * thirdWidth, widthX, thirdWidth);\n        }\n      } else if (numColors === 4) {\n        const quarter = widthX / 2;\n        ctx.fillStyle = bgColors[numbers4[0]];\n        ctx.fillRect(0, 0, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[1]];\n        ctx.fillRect(quarter, 0, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[2]];\n        ctx.fillRect(0, quarter, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[3]];\n        ctx.fillRect(quarter, quarter, quarter, quarter);\n      }\n      const sampleBackground = (x, y) => {\n        const pixelData = ctx.getImageData(x, y, 1, 1).data;\n        return {\n          r: pixelData[0],\n          g: pixelData[1],\n          b: pixelData[2]\n        };\n      };\n      const draw = () => {\n        circles.forEach(circle => {\n          const {\n            x,\n            y,\n            radius\n          } = circle;\n          const sampleX = Math.floor(x);\n          const sampleY = Math.floor(y);\n          const {\n            r,\n            g,\n            b\n          } = sampleBackground(sampleX, sampleY);\n          ctx.beginPath();\n          ctx.arc(x, y, radius, 0, 2 * Math.PI);\n          ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n          ctx.fill();\n        });\n      };\n      const doesCircleHaveCollision = circle => {\n        for (let i = 0; i < circles.length; i++) {\n          const existingCircle = circles[i];\n          const dx = circle.x - existingCircle.x;\n          const dy = circle.y - existingCircle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance <= circle.radius + existingCircle.radius) {\n            return true;\n          }\n        }\n        return false;\n      };\n      const createCircle = () => {\n        const x = Math.random() * widthX;\n        const y = Math.random() * widthX;\n        const radius = minRadius + Math.random() * (widthX / 2 - minRadius);\n        const circle = {\n          x,\n          y,\n          radius\n        };\n        if (doesCircleHaveCollision(circle)) {\n          if (createCircleAttempts > 0) {\n            createCircleAttempts--;\n            createCircle();\n          }\n          return;\n        }\n        circles.push(circle);\n      };\n      for (let i = 0; i < totalCircles; i++) {\n        createCircle();\n      }\n      draw();\n    };\n    drawCircles();\n  }, [isClicked]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 10\n  }, this);\n};\n_s(Circles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Circles;\nexport default Circles;\nvar _c;\n$RefreshReg$(_c, \"Circles\");","map":{"version":3,"names":["React","useEffect","seriously","jsxDEV","_jsxDEV","im","Circles","_ref","_s","size","canvasRef","isClicked","bgColors","canvas","current","ctx","getContext","numColors","length","numbers2","generateUniqueRandomNumbers","numbers3","numbers4","coin","Math","random","minRadius","width","height","seriouslyInstance","drawCircles","totalCircles","createCircleAttempts","widthX","circles","fillStyle","fillRect","halfWidth","thirdWidth","quarter","sampleBackground","x","y","pixelData","getImageData","data","r","g","b","draw","forEach","circle","radius","sampleX","floor","sampleY","beginPath","arc","PI","fill","doesCircleHaveCollision","i","existingCircle","dx","dy","distance","sqrt","createCircle","push","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/circles/Circles.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport seriously from 'seriously';\r\nim\r\nconst Circles = ({ size, canvasRef, isClicked, bgColors }) => {\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const numColors = bgColors.length;\r\n\r\n    let numbers2 = generateUniqueRandomNumbers(0, 1, 2);\r\n    let numbers3 = generateUniqueRandomNumbers(0, 2, 3);\r\n    let numbers4 = generateUniqueRandomNumbers(0, 3, 4);\r\n    let coin = Math.random();\r\n    const minRadius = 2;\r\n\r\n    canvas.width = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 ? size - 20 : size;\r\n    canvas.height = canvas.width;\r\n\r\n    const seriouslyInstance = seriously();\r\n\r\n    const drawCircles = () => {\r\n      const totalCircles = 3000;\r\n      let createCircleAttempts = 2000;\r\n      const widthX = canvas.width;\r\n      const circles = [];\r\n\r\n      if (numColors === 1) {\r\n        ctx.fillStyle = bgColors[0];\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      } else if (numColors === 2) {\r\n        const halfWidth = widthX / 2;\r\n        ctx.fillStyle = bgColors[numbers2[0]];\r\n        ctx.fillRect(0, 0, halfWidth, widthX);\r\n        ctx.fillStyle = bgColors[numbers2[1]];\r\n        ctx.fillRect(halfWidth, 0, halfWidth, widthX);\r\n      } else if (numColors === 3) {\r\n        const thirdWidth = canvas.width / 3;\r\n        if (coin > 0.5) {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\r\n        } else {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, widthX, thirdWidth);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(0, thirdWidth, widthX, thirdWidth);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(0, 2 * thirdWidth, widthX, thirdWidth);\r\n        }\r\n      } else if (numColors === 4) {\r\n        const quarter = widthX / 2;\r\n        ctx.fillStyle = bgColors[numbers4[0]];\r\n        ctx.fillRect(0, 0, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[1]];\r\n        ctx.fillRect(quarter, 0, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[2]];\r\n        ctx.fillRect(0, quarter, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[3]];\r\n        ctx.fillRect(quarter, quarter, quarter, quarter);\r\n      }\r\n\r\n      const sampleBackground = (x, y) => {\r\n        const pixelData = ctx.getImageData(x, y, 1, 1).data;\r\n        return {\r\n          r: pixelData[0],\r\n          g: pixelData[1],\r\n          b: pixelData[2],\r\n        };\r\n      };\r\n\r\n      const draw = () => {\r\n        circles.forEach((circle) => {\r\n          const { x, y, radius } = circle;\r\n          const sampleX = Math.floor(x);\r\n          const sampleY = Math.floor(y);\r\n\r\n          const { r, g, b } = sampleBackground(sampleX, sampleY);\r\n\r\n          ctx.beginPath();\r\n          ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n          ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\r\n          ctx.fill();\r\n        });\r\n      };\r\n\r\n      const doesCircleHaveCollision = (circle) => {\r\n        for (let i = 0; i < circles.length; i++) {\r\n          const existingCircle = circles[i];\r\n          const dx = circle.x - existingCircle.x;\r\n          const dy = circle.y - existingCircle.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance <= circle.radius + existingCircle.radius) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      };\r\n\r\n      const createCircle = () => {\r\n        const x = Math.random() * widthX;\r\n        const y = Math.random() * widthX;\r\n        const radius = minRadius + Math.random() * (widthX / 2 - minRadius);\r\n\r\n        const circle = {\r\n          x,\r\n          y,\r\n          radius,\r\n        };\r\n\r\n        if (doesCircleHaveCollision(circle)) {\r\n          if (createCircleAttempts > 0) {\r\n            createCircleAttempts--;\r\n            createCircle();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        circles.push(circle);\r\n      };\r\n\r\n      for (let i = 0; i < totalCircles; i++) {\r\n        createCircle();\r\n      }\r\n\r\n      draw();\r\n    };\r\n\r\n    drawCircles();\r\n  }, [isClicked]);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Circles;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
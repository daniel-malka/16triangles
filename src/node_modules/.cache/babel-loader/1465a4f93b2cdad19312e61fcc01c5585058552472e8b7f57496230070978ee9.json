{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\circles\\\\Circles.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Circles = _ref => {\n  _s();\n  let {\n    size,\n    canvasRef\n  } = _ref;\n  const minRadius = 5;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = size > 1440 ? size / 4 : size < 800 ? size / 2 : size < 600 && size - 20;\n    canvas.height = size > 1440 ? size / 4 : size < 800 ? size / 2 : size < 600 && size - 20;\n    const drawCircles = () => {\n      const totalCircles = 2000;\n      let createCircleAttempts = 500; // Changed to let\n\n      const widthX = canvas.width;\n      const heightY = canvas.width;\n      const maxRadius = widthX / 4;\n      const circles = [];\n      const doesCircleHaveACollision = circle => {\n        // Check for collision with other circles\n        for (let i = 0; i < circles.length; i++) {\n          const existingCircle = circles[i];\n          const dx = circle.x - existingCircle.x;\n          const dy = circle.y - existingCircle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance <= circle.radius + existingCircle.radius) {\n            return true;\n          }\n        }\n        return false;\n      };\n      const createCircle = () => {\n        const x = Math.random() * maxRadius;\n        const y = Math.random() * maxRadius;\n        const radius = minRadius + Math.random() * (maxRadius - minRadius);\n        const newCircle = {\n          x,\n          y,\n          radius\n        };\n        if (doesCircleHaveACollision(newCircle)) {\n          // Retry if there's a collision\n          if (createCircleAttempts > 0) {\n            createCircleAttempts--;\n            createCircle();\n          }\n          // Exit if retry limit is reached\n          return;\n        }\n        circles.push(newCircle);\n      };\n      for (let i = 0; i < totalCircles; i++) {\n        createCircle();\n      }\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw circles\n      circles.forEach(circle => {\n        ctx.beginPath();\n        ctx.arc(circle.x, circle.y, circle.radius, 0, 2 * Math.PI);\n        ctx.fillStyle = 'white';\n        ctx.fill();\n      });\n    };\n\n    // Set canvas size\n    canvas.width = size;\n\n    // Draw circles\n    drawCircles();\n  }, [canvasRef, size]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 10\n  }, this);\n};\n_s(Circles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Circles;\nexport default Circles;\nvar _c;\n$RefreshReg$(_c, \"Circles\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Circles","_ref","_s","size","canvasRef","minRadius","canvas","current","ctx","getContext","width","height","drawCircles","totalCircles","createCircleAttempts","widthX","heightY","maxRadius","circles","doesCircleHaveACollision","circle","i","length","existingCircle","dx","x","dy","y","distance","Math","sqrt","radius","createCircle","random","newCircle","push","clearRect","forEach","beginPath","arc","PI","fillStyle","fill","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/circles/Circles.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst Circles = ({ size, canvasRef }) => {\r\n  const minRadius = 5;\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = size > 1440 ? size / 4 : size < 800 ? size / 2 : size < 600 && size - 20;\r\n    canvas.height = size > 1440 ? size / 4 : size < 800 ? size / 2 : size < 600 && size - 20;\r\n\r\n    const drawCircles = () => {\r\n      const totalCircles = 2000;\r\n      let createCircleAttempts = 500; // Changed to let\r\n\r\n      const widthX = canvas.width;\r\n      const heightY = canvas.width;\r\n      const maxRadius = widthX / 4;\r\n\r\n      const circles = [];\r\n\r\n      const doesCircleHaveACollision = (circle) => {\r\n        // Check for collision with other circles\r\n        for (let i = 0; i < circles.length; i++) {\r\n          const existingCircle = circles[i];\r\n          const dx = circle.x - existingCircle.x;\r\n          const dy = circle.y - existingCircle.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          if (distance <= circle.radius + existingCircle.radius) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n\r\n      const createCircle = () => {\r\n        const x = Math.random() * maxRadius;\r\n        const y = Math.random() * maxRadius;\r\n        const radius = minRadius + Math.random() * (maxRadius - minRadius);\r\n\r\n        const newCircle = { x, y, radius };\r\n\r\n        if (doesCircleHaveACollision(newCircle)) {\r\n          // Retry if there's a collision\r\n          if (createCircleAttempts > 0) {\r\n            createCircleAttempts--;\r\n            createCircle();\r\n          }\r\n          // Exit if retry limit is reached\r\n          return;\r\n        }\r\n\r\n        circles.push(newCircle);\r\n      };\r\n\r\n      for (let i = 0; i < totalCircles; i++) {\r\n        createCircle();\r\n      }\r\n\r\n      // Clear the canvas\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw circles\r\n      circles.forEach((circle) => {\r\n        ctx.beginPath();\r\n        \r\n        ctx.arc(circle.x, circle.y, circle.radius, 0, 2 * Math.PI);\r\n        \r\n        ctx.fillStyle = 'white';\r\n        ctx.fill();\r\n      });\r\n    };\r\n\r\n    // Set canvas size\r\n    canvas.width = size;\r\n\r\n    // Draw circles\r\n    drawCircles();\r\n  }, [canvasRef, size]);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Circles;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
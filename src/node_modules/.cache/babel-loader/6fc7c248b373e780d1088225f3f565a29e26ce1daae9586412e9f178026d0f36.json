{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\Main\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport generateUniqueRandomNumbers from '../../utilities/functions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Circles = _ref => {\n  _s();\n  let {\n    size,\n    canvasRef,\n    isClicked,\n    bgColors,\n    strokeColor,\n    strokeWidth\n  } = _ref;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const numColors = bgColors.length;\n    let numbers2 = generateUniqueRandomNumbers(0, 1, 2);\n    let numbers3 = generateUniqueRandomNumbers(0, 2, 3);\n    let numbers4 = generateUniqueRandomNumbers(0, 3, 4);\n    let coin = Math.random();\n    const minRadius = 2;\n    canvas.width = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 ? size - 20 : size;\n    canvas.height = canvas.width;\n    const drawCircles = () => {\n      const totalCircles = 3000;\n      let createCircleAttempts = 2000;\n      const widthX = canvas.width;\n      const circles = [];\n      if (numColors === 1) {\n        ctx.fillStyle = bgColors[0];\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      } else if (numColors === 2) {\n        const halfWidth = widthX / 2;\n        ctx.fillStyle = bgColors[numbers2[0]];\n        ctx.fillRect(0, 0, halfWidth, widthX);\n        ctx.fillStyle = bgColors[numbers2[1]];\n        ctx.fillRect(halfWidth, 0, halfWidth, widthX);\n      } else if (numColors === 3) {\n        const thirdWidth = canvas.width / 3;\n        if (coin > 0.5) {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\n        } else {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, widthX, thirdWidth);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(0, thirdWidth, widthX, thirdWidth);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(0, 2 * thirdWidth, widthX, thirdWidth);\n        }\n      } else if (numColors === 4) {\n        const quarter = widthX / 2;\n        ctx.fillStyle = bgColors[numbers4[0]];\n        ctx.fillRect(0, 0, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[1]];\n        ctx.fillRect(quarter, 0, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[2]];\n        ctx.fillRect(0, quarter, quarter, quarter);\n        ctx.fillStyle = bgColors[numbers4[3]];\n        ctx.fillRect(quarter, quarter, quarter, quarter);\n      }\n      ctx.lineWidth = strokeWidth;\n      const draw = () => {\n        circles.forEach(circle => {\n          const {\n            x,\n            y,\n            radius,\n            colors\n          } = circle;\n          ctx.beginPath();\n          ctx.arc(x, y, radius, 0, 2 * Math.PI);\n          if (radius > minRadius && colors.length > 1) {\n            const gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);\n            const numStops = colors.length;\n            colors.forEach((color, index) => {\n              const stop = index / (numStops - 1);\n              gradient.addColorStop(stop, color);\n            });\n            ctx.fillStyle = gradient;\n          } else {\n            ctx.fillStyle = colors[0];\n          }\n          ctx.fill();\n          ctx.strokeStyle = strokeColor;\n          ctx.stroke();\n        });\n      };\n      const doesCircleHaveCollision = circle => {\n        for (let i = 0; i < circles.length; i++) {\n          const existingCircle = circles[i];\n          const dx = circle.x - existingCircle.x;\n          const dy = circle.y - existingCircle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance <= circle.radius + existingCircle.radius) {\n            return true;\n          }\n        }\n        return false;\n      };\n      const createCircle = () => {\n        const x = Math.random() * widthX;\n        const y = Math.random() * widthX;\n        const radius = minRadius + Math.random() * (widthX / 2 - minRadius);\n        const circle = {\n          x,\n          y,\n          radius,\n          colors: bgColors.slice()\n        };\n        if (doesCircleHaveCollision(circle)) {\n          if (createCircleAttempts > 0) {\n            createCircleAttempts--;\n            createCircle();\n          }\n          return;\n        }\n        circles.push(circle);\n      };\n      for (let i = 0; i < totalCircles; i++) {\n        createCircle();\n      }\n      draw();\n    };\n    drawCircles();\n  }, [isClicked]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n};\n_s(Circles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Circles;\nexport default Circles;\nvar _c;\n$RefreshReg$(_c, \"Circles\");","map":{"version":3,"names":["React","useEffect","generateUniqueRandomNumbers","jsxDEV","_jsxDEV","Circles","_ref","_s","size","canvasRef","isClicked","bgColors","strokeColor","strokeWidth","canvas","current","ctx","getContext","numColors","length","numbers2","numbers3","numbers4","coin","Math","random","minRadius","width","height","drawCircles","totalCircles","createCircleAttempts","widthX","circles","fillStyle","fillRect","halfWidth","thirdWidth","quarter","lineWidth","draw","forEach","circle","x","y","radius","colors","beginPath","arc","PI","gradient","createRadialGradient","numStops","color","index","stop","addColorStop","fill","strokeStyle","stroke","doesCircleHaveCollision","i","existingCircle","dx","dy","distance","sqrt","createCircle","slice","push","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/Main/Main.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport generateUniqueRandomNumbers from '../../utilities/functions';\r\n\r\nconst Circles = ({ size, canvasRef, isClicked, bgColors, strokeColor, strokeWidth }) => {\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const numColors = bgColors.length;\r\n\r\n    let numbers2 = generateUniqueRandomNumbers(0, 1, 2);\r\n    let numbers3 = generateUniqueRandomNumbers(0, 2, 3);\r\n    let numbers4 = generateUniqueRandomNumbers(0, 3, 4);\r\n    let coin = Math.random();\r\n    const minRadius = 2;\r\n\r\n    canvas.width = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 ? size - 20 : size;\r\n    canvas.height = canvas.width;\r\n\r\n    const drawCircles = () => {\r\n      const totalCircles = 3000;\r\n      let createCircleAttempts = 2000;\r\n      const widthX = canvas.width;\r\n      const circles = [];\r\n\r\n      if (numColors === 1) {\r\n        ctx.fillStyle = bgColors[0];\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      } else if (numColors === 2) {\r\n        const halfWidth = widthX / 2;\r\n        ctx.fillStyle = bgColors[numbers2[0]];\r\n        ctx.fillRect(0, 0, halfWidth, widthX);\r\n        ctx.fillStyle = bgColors[numbers2[1]];\r\n        ctx.fillRect(halfWidth, 0, halfWidth, widthX);\r\n      } else if (numColors === 3) {\r\n        const thirdWidth = canvas.width / 3;\r\n        if (coin > 0.5) {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\r\n        } else {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, widthX, thirdWidth);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(0, thirdWidth, widthX, thirdWidth);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(0, 2 * thirdWidth, widthX, thirdWidth);\r\n        }\r\n      } else if (numColors === 4) {\r\n        const quarter = widthX / 2;\r\n        ctx.fillStyle = bgColors[numbers4[0]];\r\n        ctx.fillRect(0, 0, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[1]];\r\n        ctx.fillRect(quarter, 0, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[2]];\r\n        ctx.fillRect(0, quarter, quarter, quarter);\r\n        ctx.fillStyle = bgColors[numbers4[3]];\r\n        ctx.fillRect(quarter, quarter, quarter, quarter);\r\n      }\r\n\r\n      ctx.lineWidth = strokeWidth;\r\n\r\n      const draw = () => {\r\n        circles.forEach((circle) => {\r\n          const { x, y, radius, colors } = circle;\r\n\r\n          ctx.beginPath();\r\n          ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n\r\n          if (radius > minRadius && colors.length > 1) {\r\n            const gradient = ctx.createRadialGradient(x, y, 0, x, y, radius);\r\n            const numStops = colors.length;\r\n\r\n            colors.forEach((color, index) => {\r\n              const stop = index / (numStops - 1);\r\n              gradient.addColorStop(stop, color);\r\n            });\r\n\r\n            ctx.fillStyle = gradient;\r\n          } else {\r\n            ctx.fillStyle = colors[0];\r\n          }\r\n\r\n          ctx.fill();\r\n          ctx.strokeStyle = strokeColor;\r\n          ctx.stroke();\r\n        });\r\n      };\r\n\r\n      const doesCircleHaveCollision = (circle) => {\r\n        for (let i = 0; i < circles.length; i++) {\r\n          const existingCircle = circles[i];\r\n          const dx = circle.x - existingCircle.x;\r\n          const dy = circle.y - existingCircle.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance <= circle.radius + existingCircle.radius) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      };\r\n\r\n      const createCircle = () => {\r\n        const x = Math.random() * widthX;\r\n        const y = Math.random() * widthX;\r\n        const radius = minRadius + Math.random() * (widthX / 2 - minRadius);\r\n\r\n        const circle = {\r\n          x,\r\n          y,\r\n          radius,\r\n          colors: bgColors.slice(),\r\n        };\r\n\r\n        if (doesCircleHaveCollision(circle)) {\r\n          if (createCircleAttempts > 0) {\r\n            createCircleAttempts--;\r\n            createCircle();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        circles.push(circle);\r\n      };\r\n\r\n      for (let i = 0; i < totalCircles; i++) {\r\n        createCircle();\r\n      }\r\n\r\n      draw();\r\n    };\r\n\r\n    drawCircles();\r\n  }, [isClicked]);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Circles;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
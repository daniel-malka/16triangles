{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\TerrainAnimation\\\\TerrainAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport p5 from 'p5';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TerrainAnimation = () => {\n  _s();\n  const sketchRef = useRef(null);\n  useEffect(() => {\n    const sketch = new p5(p => {\n      let terrain = [];\n      let flying = 0.0;\n      let scl = 20; // Controls the scale of the terrain\n      let cols, rows;\n      p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);\n\n        // Calculate the number of columns and rows based on canvas size and scale\n        cols = Math.floor(p.width / scl);\n        rows = Math.floor(p.height / scl);\n\n        // Initialize the terrain array\n        for (let x = 0; x < cols; x++) {\n          terrain[x] = [];\n        }\n      };\n      p.draw = () => {\n        p.background(0);\n\n        // Update the flying variable to control the terrain generation\n        flying -= 0.3;\n        let yoff = flying;\n        for (let y = 0; y < rows; y++) {\n          let xoff = 0;\n          for (let x = 0; x < cols; x++) {\n            // Use the noise function to generate the height of each vertex\n            terrain[x][y] = p.map(p.noise(xoff, yoff), 0, 1, -100, 100);\n            xoff += 0.2;\n          }\n          yoff += 0.2;\n        }\n\n        // Set up the camera and lighting for 3D rendering\n        p.rotateX(p.PI / 3);\n        p.translate(-p.width / 2, -p.height / 2);\n        p.ambientLight(100);\n        p.directionalLight(255, 255, 255, 0, 0, 1);\n\n        // Render the terrain using triangles\n        for (let y = 0; y < rows - 1; y++) {\n          p.beginShape(p.TRIANGLE_STRIP);\n          for (let x = 0; x < cols; x++) {\n            // Calculate the vertices' positions\n            p.vertex(x * scl, y * scl, terrain[x][y]);\n            p.vertex(x * scl, (y + 1) * scl, terrain[x][y + 1]);\n          }\n          p.endShape();\n        }\n      };\n    });\n\n    // Cleanup function to remove the p5.js sketch when component unmounts\n    return () => sketch.remove();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: sketchRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(TerrainAnimation, \"ex7hYNA9F+LvZx2wOxRGRjxYHos=\");\n_c = TerrainAnimation;\nexport default TerrainAnimation;\nvar _c;\n$RefreshReg$(_c, \"TerrainAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","p5","jsxDEV","_jsxDEV","TerrainAnimation","_s","sketchRef","sketch","p","terrain","flying","scl","cols","rows","setup","createCanvas","windowWidth","windowHeight","WEBGL","Math","floor","width","height","x","draw","background","yoff","y","xoff","map","noise","rotateX","PI","translate","ambientLight","directionalLight","beginShape","TRIANGLE_STRIP","vertex","endShape","remove","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/TerrainAnimation/TerrainAnimation.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport p5 from 'p5';\r\n\r\nconst TerrainAnimation = () => {\r\n  const sketchRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const sketch = new p5((p) => {\r\n      let terrain = [];\r\n      let flying = 0.0;\r\n      let scl = 20; // Controls the scale of the terrain\r\n      let cols, rows;\r\n\r\n      p.setup = () => {\r\n        p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);\r\n\r\n        // Calculate the number of columns and rows based on canvas size and scale\r\n        cols = Math.floor(p.width / scl);\r\n        rows = Math.floor(p.height / scl);\r\n\r\n        // Initialize the terrain array\r\n        for (let x = 0; x < cols; x++) {\r\n          terrain[x] = [];\r\n        }\r\n      };\r\n\r\n      p.draw = () => {\r\n        p.background(0);\r\n\r\n        // Update the flying variable to control the terrain generation\r\n        flying -= 0.3;\r\n\r\n        let yoff = flying;\r\n        for (let y = 0; y < rows; y++) {\r\n          let xoff = 0;\r\n          for (let x = 0; x < cols; x++) {\r\n            // Use the noise function to generate the height of each vertex\r\n            terrain[x][y] = p.map(p.noise(xoff, yoff), 0, 1, -100, 100);\r\n            xoff += 0.2;\r\n          }\r\n          yoff += 0.2;\r\n        }\r\n\r\n        // Set up the camera and lighting for 3D rendering\r\n        p.rotateX(p.PI / 3);\r\n        p.translate(-p.width / 2, -p.height / 2);\r\n        p.ambientLight(100);\r\n        p.directionalLight(255, 255, 255, 0, 0, 1);\r\n\r\n        // Render the terrain using triangles\r\n        for (let y = 0; y < rows - 1; y++) {\r\n          p.beginShape(p.TRIANGLE_STRIP);\r\n          for (let x = 0; x < cols; x++) {\r\n            // Calculate the vertices' positions\r\n            p.vertex(x * scl, y * scl, terrain[x][y]);\r\n            p.vertex(x * scl, (y + 1) * scl, terrain[x][y + 1]);\r\n          }\r\n          p.endShape();\r\n        }\r\n      };\r\n    });\r\n\r\n    // Cleanup function to remove the p5.js sketch when component unmounts\r\n    return () => sketch.remove();\r\n  }, []);\r\n\r\n  return <div ref={sketchRef} />;\r\n};\r\n\r\nexport default TerrainAnimation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// https://cs.nyu.edu/~perlin/noise/\n\nconst _p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\nfor (let i = 0; i < 256; i++) {\n  _p[256 + i] = _p[i];\n}\nfunction fade(t) {\n  return t * t * t * (t * (t * 6 - 15) + 10);\n}\nfunction lerp(t, a, b) {\n  return a + t * (b - a);\n}\nfunction grad(hash, x, y, z) {\n  const h = hash & 15;\n  const u = h < 8 ? x : y,\n    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n  return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n}\nclass ImprovedNoise {\n  noise(x, y, z) {\n    const floorX = Math.floor(x),\n      floorY = Math.floor(y),\n      floorZ = Math.floor(z);\n    const X = floorX & 255,\n      Y = floorY & 255,\n      Z = floorZ & 255;\n    x -= floorX;\n    y -= floorY;\n    z -= floorZ;\n    const xMinus1 = x - 1,\n      yMinus1 = y - 1,\n      zMinus1 = z - 1;\n    const u = fade(x),\n      v = fade(y),\n      w = fade(z);\n    const A = _p[X] + Y,\n      AA = _p[A] + Z,\n      AB = _p[A + 1] + Z,\n      B = _p[X + 1] + Y,\n      BA = _p[B] + Z,\n      BB = _p[B + 1] + Z;\n    return lerp(w, lerp(v, lerp(u, grad(_p[AA], x, y, z), grad(_p[BA], xMinus1, y, z)), lerp(u, grad(_p[AB], x, yMinus1, z), grad(_p[BB], xMinus1, yMinus1, z))), lerp(v, lerp(u, grad(_p[AA + 1], x, y, zMinus1), grad(_p[BA + 1], xMinus1, y, zMinus1)), lerp(u, grad(_p[AB + 1], x, yMinus1, zMinus1), grad(_p[BB + 1], xMinus1, yMinus1, zMinus1))));\n  }\n}\nexport { ImprovedNoise };","map":{"version":3,"names":["_p","i","fade","t","lerp","a","b","grad","hash","x","y","z","h","u","v","ImprovedNoise","noise","floorX","Math","floor","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/node_modules/three/examples/jsm/math/ImprovedNoise.js"],"sourcesContent":["// https://cs.nyu.edu/~perlin/noise/\n\nconst _p = [ 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n\t 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n\t 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n\t 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n\t 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n\t 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n\t 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n\t 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n\t 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n\t 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180 ];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_p[ 256 + i ] = _p[ i ];\n\n}\n\nfunction fade( t ) {\n\n\treturn t * t * t * ( t * ( t * 6 - 15 ) + 10 );\n\n}\n\nfunction lerp( t, a, b ) {\n\n\treturn a + t * ( b - a );\n\n}\n\nfunction grad( hash, x, y, z ) {\n\n\tconst h = hash & 15;\n\tconst u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n\treturn ( ( h & 1 ) == 0 ? u : - u ) + ( ( h & 2 ) == 0 ? v : - v );\n\n}\n\nclass ImprovedNoise {\n\n\tnoise( x, y, z ) {\n\n\t\tconst floorX = Math.floor( x ), floorY = Math.floor( y ), floorZ = Math.floor( z );\n\n\t\tconst X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;\n\n\t\tx -= floorX;\n\t\ty -= floorY;\n\t\tz -= floorZ;\n\n\t\tconst xMinus1 = x - 1, yMinus1 = y - 1, zMinus1 = z - 1;\n\n\t\tconst u = fade( x ), v = fade( y ), w = fade( z );\n\n\t\tconst A = _p[ X ] + Y, AA = _p[ A ] + Z, AB = _p[ A + 1 ] + Z, B = _p[ X + 1 ] + Y, BA = _p[ B ] + Z, BB = _p[ B + 1 ] + Z;\n\n\t\treturn lerp( w, lerp( v, lerp( u, grad( _p[ AA ], x, y, z ),\n\t\t\tgrad( _p[ BA ], xMinus1, y, z ) ),\n\t\tlerp( u, grad( _p[ AB ], x, yMinus1, z ),\n\t\t\tgrad( _p[ BB ], xMinus1, yMinus1, z ) ) ),\n\t\tlerp( v, lerp( u, grad( _p[ AA + 1 ], x, y, zMinus1 ),\n\t\t\tgrad( _p[ BA + 1 ], xMinus1, y, zMinus1 ) ),\n\t\tlerp( u, grad( _p[ AB + 1 ], x, yMinus1, zMinus1 ),\n\t\t\tgrad( _p[ BB + 1 ], xMinus1, yMinus1, zMinus1 ) ) ) );\n\n\t}\n\n}\n\nexport { ImprovedNoise };\n"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAG,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EACnI,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EACzH,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EACvH,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvH,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EACvH,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACtH,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzH,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACtH,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
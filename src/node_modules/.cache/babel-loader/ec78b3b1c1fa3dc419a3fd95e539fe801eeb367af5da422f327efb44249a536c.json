{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\circles\\\\Circles.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Circles = () => {\n  _s();\n  let itter = 0;\n  let circles = [];\n  const minRadius = 5;\n  const maxRadius = 300;\n  const totalCircles = 2000;\n  const createCircleAttempts = 500;\n  const widthX = 500;\n  const heightY = 500;\n  const createAndDrawCircle = () => {\n    let newCircle;\n    let circleSafeToDraw = false;\n    for (let tries = 0; tries < createCircleAttempts; tries++) {\n      newCircle = {\n        x: Math.random() * (widthX - 30) + 15,\n        y: Math.random() * (heightY - 30) + 15,\n        radius: minRadius\n      };\n      const doesCircleHaveACollision = circle => {\n        for (let i = 0; i < circles.length; i++) {\n          let otherCircle = circles[i];\n          let a = circle.radius + otherCircle.radius / 4 * 1.976;\n          let x = circle.x - otherCircle.x;\n          let y = circle.y - otherCircle.y;\n          if (a >= Math.sqrt(x * x + y * y)) {\n            return true;\n          }\n        }\n        if (circle.x + circle.radius >= widthX - 15 || circle.x - circle.radius <= 0) {\n          return true;\n        }\n        if (circle.y + circle.radius >= heightY - 15 || circle.y - circle.radius <= 0) {\n          return true;\n        }\n        return false;\n      };\n      if (doesCircleHaveACollision(newCircle)) {\n        continue;\n      } else {\n        circleSafeToDraw = true;\n        break;\n      }\n    }\n    if (!circleSafeToDraw) {\n      return;\n    }\n    for (let radiusSize = minRadius; radiusSize <= maxRadius; radiusSize++) {\n      newCircle.radius = radiusSize;\n      if (doesCircleHaveACollision(newCircle)) {\n        newCircle.radius--;\n        break;\n      }\n    }\n    circles.push(newCircle);\n    drawCircle(newCircle);\n  };\n  const setup = () => {\n    createCanvas(widthX, heightY);\n    background(0);\n    translate(widthX / 2, heightY / 2);\n    fill(255);\n    circle(0, 0, widthX / 2);\n    fill(0);\n    textSize(45);\n    textAlign(CENTER, CENTER);\n    text('Click here', 0, 0);\n  };\n  const draw = () => {\n    if (mouseIsPressed) {\n      circles = [];\n      background(0);\n      noFill();\n      stroke(255);\n      for (let i = 0; i < totalCircles; i++) {\n        createAndDrawCircle();\n      }\n      itter += 1;\n    }\n  };\n  useEffect(() => {\n    setup();\n    draw();\n    return () => {\n      // Cleanup code (if necessary)\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n};\n_s(Circles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Circles;\nexport default Circles;\nvar _c;\n$RefreshReg$(_c, \"Circles\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Circles","_s","itter","circles","minRadius","maxRadius","totalCircles","createCircleAttempts","widthX","heightY","createAndDrawCircle","newCircle","circleSafeToDraw","tries","x","Math","random","y","radius","doesCircleHaveACollision","circle","i","length","otherCircle","a","sqrt","radiusSize","push","drawCircle","setup","createCanvas","background","translate","fill","textSize","textAlign","CENTER","text","draw","mouseIsPressed","noFill","stroke","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/circles/Circles.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst Circles = () => {\r\n  let itter = 0;\r\n  let circles = [];\r\n  const minRadius = 5;\r\n  const maxRadius = 300;\r\n  const totalCircles = 2000;\r\n  const createCircleAttempts = 500;\r\n  const widthX = 500;\r\n  const heightY = 500;\r\n\r\n  const createAndDrawCircle = () => {\r\n    let newCircle;\r\n    let circleSafeToDraw = false;\r\n\r\n    for (let tries = 0; tries < createCircleAttempts; tries++) {\r\n      newCircle = {\r\n        x: Math.random() * (widthX - 30) + 15,\r\n        y: Math.random() * (heightY - 30) + 15,\r\n        radius: minRadius,\r\n      };\r\n\r\n      const doesCircleHaveACollision = (circle) => {\r\n        for (let i = 0; i < circles.length; i++) {\r\n          let otherCircle = circles[i];\r\n          let a = circle.radius + (otherCircle.radius / 4) * 1.976;\r\n          let x = circle.x - otherCircle.x;\r\n          let y = circle.y - otherCircle.y;\r\n\r\n          if (a >= Math.sqrt(x * x + y * y)) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        if (circle.x + circle.radius >= widthX - 15 || circle.x - circle.radius <= 0) {\r\n          return true;\r\n        }\r\n\r\n        if (circle.y + circle.radius >= heightY - 15 || circle.y - circle.radius <= 0) {\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      };\r\n\r\n      if (doesCircleHaveACollision(newCircle)) {\r\n        continue;\r\n      } else {\r\n        circleSafeToDraw = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!circleSafeToDraw) {\r\n      return;\r\n    }\r\n\r\n    for (let radiusSize = minRadius; radiusSize <= maxRadius; radiusSize++) {\r\n      newCircle.radius = radiusSize;\r\n      if (doesCircleHaveACollision(newCircle)) {\r\n        newCircle.radius--;\r\n        break;\r\n      }\r\n    }\r\n\r\n    circles.push(newCircle);\r\n    drawCircle(newCircle);\r\n  };\r\n\r\n  const setup = () => {\r\n    createCanvas(widthX, heightY);\r\n    background(0);\r\n    translate(widthX / 2, heightY / 2);\r\n    fill(255);\r\n    circle(0, 0, widthX / 2);\r\n    fill(0);\r\n    textSize(45);\r\n    textAlign(CENTER, CENTER);\r\n    text('Click here', 0, 0);\r\n  };\r\n\r\n  const draw = () => {\r\n    if (mouseIsPressed) {\r\n      circles = [];\r\n      background(0);\r\n      noFill();\r\n      stroke(255);\r\n\r\n      for (let i = 0; i < totalCircles; i++) {\r\n        createAndDrawCircle();\r\n      }\r\n\r\n      itter += 1;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setup();\r\n    draw();\r\n\r\n    return () => {\r\n      // Cleanup code (if necessary)\r\n    };\r\n  }, []);\r\n\r\n  return <canvas id=\"canvas\" />;\r\n};\r\n\r\nexport default Circles;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
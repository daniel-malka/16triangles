{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\TerrainAnimation\\\\TerrainAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TerrainAnimation = () => {\n  _s();\n  const containerRef = useRef(null);\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    let camera, scene, renderer, controls;\n    let noise, mesh;\n    function init() {\n      // Create a camera\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.set(0, 50, 100);\n\n      // Create a scene\n      scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x000000);\n\n      // Create a renderer\n      renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      containerRef.current.appendChild(renderer.domElement);\n\n      // Add event listener for window resizing\n      window.addEventListener('resize', onWindowResize, false);\n\n      // Add controls for interaction\n      controls = new OrbitControls(camera, renderer.domElement);\n\n      // Generate terrain\n      noise = new ImprovedNoise();\n      generateTerrain();\n\n      // Start the animation loop\n      animate();\n    }\n\n    // Handle window resizing\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    // Generate terrain using Perlin noise\n    function generateTerrain() {\n      const size = 200;\n      const divisions = 256;\n      const geometry = new THREE.PlaneGeometry(size, size, divisions, divisions);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff,\n        wireframe: true\n      });\n      for (let i = 0, j = 0, l = geometry.vertices.length; i < l; i++, j += 3) {\n        geometry.vertices[i].z = noise.noise(geometry.vertices[i].x / 30, geometry.vertices[i].y / 30, 0) * 3;\n      }\n      mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n    }\n\n    // Animation loop\n    function animate() {\n      animationFrameId.current = requestAnimationFrame(animate);\n\n      // Perform any animation updates here\n      mesh.rotation.z += 0.002;\n      renderer.render(scene, camera);\n    }\n\n    // Clean up Three.js objects when component is unmounted\n    return () => {\n      cancelAnimationFrame(animationFrameId.current);\n      window.removeEventListener('resize', onWindowResize);\n      if (renderer) {\n        renderer.dispose();\n      }\n      scene.remove(mesh);\n      mesh.geometry.dispose();\n      mesh.material.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"animation-container\",\n    style: {\n      width: '100%',\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n};\n_s(TerrainAnimation, \"ajEYVWde01g5rLH4HHi9cEXT1ag=\");\n_c = TerrainAnimation;\nexport default TerrainAnimation;\nvar _c;\n$RefreshReg$(_c, \"TerrainAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","ImprovedNoise","jsxDEV","_jsxDEV","TerrainAnimation","_s","containerRef","animationFrameId","camera","scene","renderer","controls","noise","mesh","init","PerspectiveCamera","window","innerWidth","innerHeight","position","set","Scene","background","Color","WebGLRenderer","antialias","setSize","current","appendChild","domElement","addEventListener","onWindowResize","generateTerrain","animate","aspect","updateProjectionMatrix","size","divisions","geometry","PlaneGeometry","material","MeshBasicMaterial","color","wireframe","i","j","l","vertices","length","z","x","y","Mesh","add","requestAnimationFrame","rotation","render","cancelAnimationFrame","removeEventListener","dispose","remove","ref","className","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/TerrainAnimation/TerrainAnimation.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise';\r\n\r\nconst TerrainAnimation = () => {\r\n  const containerRef = useRef(null);\r\n  const animationFrameId = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let camera, scene, renderer, controls;\r\n    let noise, mesh;\r\n\r\n    function init() {\r\n      // Create a camera\r\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n      camera.position.set(0, 50, 100);\r\n\r\n      // Create a scene\r\n      scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0x000000);\r\n\r\n      // Create a renderer\r\n      renderer = new THREE.WebGLRenderer({ antialias: true });\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      containerRef.current.appendChild(renderer.domElement);\r\n\r\n      // Add event listener for window resizing\r\n      window.addEventListener('resize', onWindowResize, false);\r\n\r\n      // Add controls for interaction\r\n      controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n      // Generate terrain\r\n      noise = new ImprovedNoise();\r\n      generateTerrain();\r\n\r\n      // Start the animation loop\r\n      animate();\r\n    }\r\n\r\n    // Handle window resizing\r\n    function onWindowResize() {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    // Generate terrain using Perlin noise\r\n    function generateTerrain() {\r\n      const size = 200;\r\n      const divisions = 256;\r\n\r\n      const geometry = new THREE.PlaneGeometry(size, size, divisions, divisions);\r\n      const material = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });\r\n\r\n      for (let i = 0, j = 0, l = geometry.vertices.length; i < l; i++, j += 3) {\r\n        geometry.vertices[i].z = noise.noise(geometry.vertices[i].x / 30, geometry.vertices[i].y / 30, 0) * 3;\r\n      }\r\n\r\n      mesh = new THREE.Mesh(geometry, material);\r\n      scene.add(mesh);\r\n    }\r\n\r\n    // Animation loop\r\n    function animate() {\r\n      animationFrameId.current = requestAnimationFrame(animate);\r\n\r\n      // Perform any animation updates here\r\n      mesh.rotation.z += 0.002;\r\n\r\n      renderer.render(scene, camera);\r\n    }\r\n\r\n    // Clean up Three.js objects when component is unmounted\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n      window.removeEventListener('resize', onWindowResize);\r\n\r\n      if (renderer) {\r\n        renderer.dispose();\r\n      }\r\n\r\n      scene.remove(mesh);\r\n      mesh.geometry.dispose();\r\n      mesh.material.dispose();\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={containerRef} className=\"animation-container\" style={{ width: '100%', height: '100vh' }} />;\r\n};\r\n\r\nexport default TerrainAnimation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
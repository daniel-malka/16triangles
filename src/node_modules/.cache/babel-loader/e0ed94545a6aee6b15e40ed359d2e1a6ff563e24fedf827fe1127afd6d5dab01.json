{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CODE\\\\ART\\\\daniel\\\\16TRI\\\\github\\\\16triangles\\\\src\\\\components\\\\circles\\\\Circles.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport generateUniqueRandomNumbers from '../../utilities/functions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Circles = _ref => {\n  _s();\n  let {\n    size,\n    canvasRef,\n    isClicked,\n    bgColors,\n    strokeColor,\n    fillColor,\n    strokeWidth\n  } = _ref;\n  console.log(bgColors);\n  console.log('length', bgColors.length);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const numColors = bgColors.length;\n    let numbers2 = generateUniqueRandomNumbers(0, 1, 2);\n    let numbers3 = generateUniqueRandomNumbers(0, 2, 3);\n    let numbers4 = generateUniqueRandomNumbers(0, 3, 4);\n    let coin = Math.random();\n    const minRadius = 2;\n    canvas.width = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 && size - 20;\n    canvas.height = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 && size - 20;\n    const drawCircles = () => {\n      const totalCircles = 3000;\n      let createCircleAttempts = 2000;\n      const widthX = canvas.width;\n      const circles = [];\n      if (numColors === 1) {\n        ctx.fillStyle = bgColors[0];\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      } else if (numColors === 2) {\n        const halfWidth = widthX / 2;\n        console.log(coin);\n        if (coin > 0.5) {\n          console.log('1', bgColors[numbers2[0]]);\n          console.log('2', bgColors[numbers2[1]]);\n          ctx.fillStyle = bgColors[numbers2[0]];\n          ctx.fillRect(0, 0, halfWidth, widthX);\n          ctx.fillStyle = bgColors[numbers2[1]];\n          ctx.fillRect(halfWidth, 0, halfWidth, widthX);\n        } else if (coin <= 0.5) {\n          ctx.fillStyle = bgColors[numbers2[0]];\n          ctx.fillRect(0, 0, widthX, halfWidth);\n          ctx.fillStyle = bgColors[numbers2[1]];\n          ctx.fillRect(0, halfWidth, widthX, halfWidth);\n        }\n      } else if (numColors === 3) {\n        const thirdWidth = canvas.width / 3;\n        if (coin > 0.666) {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\n        } else if (coin <= 0.666 && coin > 0.333) {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\n        } else if (coin <= 0.333) {\n          ctx.fillStyle = bgColors[numbers3[0]];\n          ctx.fillRect(0, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[1]];\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\n          ctx.fillStyle = bgColors[numbers3[2]];\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\n        }\n      } else if (numColors === 4) {\n        const quarter = widthX;\n        if (coin >= 0.75) {\n          ctx.fillStyle = bgColors[numbers4[0]];\n          ctx.fillRect(0, 0, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[1]];\n          ctx.fillRect(quarter, 0, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[2]];\n          ctx.fillRect(0, quarter, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[3]];\n          ctx.fillRect(quarter, quarter, quarter, quarter);\n        } else if (coin < 0.75 && coin >= 0.5) {\n          ctx.fillStyle = bgColors[numbers4[0]];\n          ctx.fillRect(0, 0, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[1]];\n          ctx.fillRect(quarter, 0, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[2]];\n          ctx.fillRect(0, quarter, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[3]];\n          ctx.fillRect(quarter, quarter, quarter, quarter);\n        } else if (coin < 0.5 && coin >= 0.25) {\n          ctx.fillStyle = bgColors[numbers4[0]];\n          ctx.fillRect(0, 0, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[1]];\n          ctx.fillRect(quarter, 0, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[2]];\n          ctx.fillRect(0, quarter, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[3]];\n          ctx.fillRect(quarter, quarter, quarter, quarter);\n        } else if (coin < 0.25) {\n          ctx.fillStyle = bgColors[numbers4[0]];\n          ctx.fillRect(0, 0, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[1]];\n          ctx.fillRect(quarter, 0, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[2]];\n          ctx.fillRect(0, quarter, quarter, quarter);\n          ctx.fillStyle = bgColors[numbers4[3]];\n          ctx.fillRect(quarter, quarter, quarter, quarter);\n        }\n      }\n      ctx.fillRect(0, 0, widthX, widthX); // Draw and fill the rectangle\n      ctx.lineWidth = strokeWidth; // Set the stroke width\n\n      const draw = () => {\n        circles.forEach(circle => {\n          ctx.beginPath();\n          ctx.arc(circle.x, circle.y, circle.radius, 0, 2 * Math.PI);\n          ctx.strokeStyle = strokeColor;\n          ctx.fillStyle = 'none';\n          ctx.stroke();\n        });\n      };\n      const doesCircleHaveACollision = circle => {\n        for (let i = 0; i < circles.length; i++) {\n          const existingCircle = circles[i];\n          const dx = circle.x - existingCircle.x;\n          const dy = circle.y - existingCircle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance <= circle.radius + existingCircle.radius) {\n            return true;\n          }\n        }\n        return false;\n      };\n      const createCircle = () => {\n        const x = Math.random() * widthX;\n        const y = Math.random() * widthX;\n        const radius = minRadius + Math.random() * (widthX - minRadius);\n        const newCircle = {\n          x,\n          y,\n          radius\n        };\n        if (doesCircleHaveACollision(newCircle)) {\n          if (createCircleAttempts > 0) {\n            createCircleAttempts--;\n            createCircle();\n          }\n          return;\n        }\n        circles.push(newCircle);\n      };\n      for (let i = 0; i < totalCircles; i++) {\n        createCircle();\n      }\n      draw();\n    };\n    drawCircles();\n  }, [isClicked]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 10\n  }, this);\n};\n_s(Circles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Circles;\nexport default Circles;\nvar _c;\n$RefreshReg$(_c, \"Circles\");","map":{"version":3,"names":["React","useEffect","generateUniqueRandomNumbers","jsxDEV","_jsxDEV","Circles","_ref","_s","size","canvasRef","isClicked","bgColors","strokeColor","fillColor","strokeWidth","console","log","length","canvas","current","ctx","getContext","numColors","numbers2","numbers3","numbers4","coin","Math","random","minRadius","width","height","drawCircles","totalCircles","createCircleAttempts","widthX","circles","fillStyle","fillRect","halfWidth","thirdWidth","quarter","lineWidth","draw","forEach","circle","beginPath","arc","x","y","radius","PI","strokeStyle","stroke","doesCircleHaveACollision","i","existingCircle","dx","dy","distance","sqrt","createCircle","newCircle","push","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/CODE/ART/daniel/16TRI/github/16triangles/src/components/circles/Circles.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport generateUniqueRandomNumbers from '../../utilities/functions';\r\nconst Circles = ({ size, canvasRef, isClicked, bgColors, strokeColor, fillColor, strokeWidth }) => {\r\n  console.log(bgColors);\r\n  console.log('length', bgColors.length);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const numColors = bgColors.length;\r\n\r\n    let numbers2 = generateUniqueRandomNumbers(0, 1, 2);\r\n    let numbers3 = generateUniqueRandomNumbers(0, 2, 3);\r\n    let numbers4 = generateUniqueRandomNumbers(0, 3, 4);\r\n    let coin = Math.random();\r\n    const minRadius = 2;\r\n    canvas.width = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 && size - 20;\r\n    canvas.height = size > 1440 ? 800 : size < 800 ? size / 2 : size < 600 && size - 20;\r\n    const drawCircles = () => {\r\n      const totalCircles = 3000;\r\n      let createCircleAttempts = 2000;\r\n\r\n      const widthX = canvas.width;\r\n\r\n      const circles = [];\r\n\r\n      if (numColors === 1) {\r\n        ctx.fillStyle = bgColors[0];\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      } else if (numColors === 2) {\r\n        const halfWidth = widthX / 2;\r\n        console.log(coin);\r\n        if (coin > 0.5) {\r\n          console.log('1', bgColors[numbers2[0]]);\r\n          console.log('2', bgColors[numbers2[1]]);\r\n          ctx.fillStyle = bgColors[numbers2[0]];\r\n          ctx.fillRect(0, 0, halfWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers2[1]];\r\n          ctx.fillRect(halfWidth, 0, halfWidth, widthX);\r\n        } else if (coin <= 0.5) {\r\n          ctx.fillStyle = bgColors[numbers2[0]];\r\n          ctx.fillRect(0, 0, widthX, halfWidth);\r\n          ctx.fillStyle = bgColors[numbers2[1]];\r\n          ctx.fillRect(0, halfWidth, widthX, halfWidth);\r\n        }\r\n      } else if (numColors === 3) {\r\n        const thirdWidth = canvas.width / 3;\r\n        if (coin > 0.666) {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\r\n        } else if (coin <= 0.666 && coin > 0.333) {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\r\n        } else if (coin <= 0.333) {\r\n          ctx.fillStyle = bgColors[numbers3[0]];\r\n          ctx.fillRect(0, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[1]];\r\n          ctx.fillRect(thirdWidth, 0, thirdWidth, widthX);\r\n          ctx.fillStyle = bgColors[numbers3[2]];\r\n          ctx.fillRect(2 * thirdWidth, 0, thirdWidth, widthX);\r\n        }\r\n      } else if (numColors === 4) {\r\n        const quarter = widthX;\r\n        if (coin >= 0.75) {\r\n          ctx.fillStyle = bgColors[numbers4[0]];\r\n          ctx.fillRect(0, 0, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[1]];\r\n          ctx.fillRect(quarter, 0, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[2]];\r\n          ctx.fillRect(0, quarter, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[3]];\r\n          ctx.fillRect(quarter, quarter, quarter, quarter);\r\n        } else if (coin < 0.75 && coin >= 0.5) {\r\n          ctx.fillStyle = bgColors[numbers4[0]];\r\n          ctx.fillRect(0, 0, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[1]];\r\n          ctx.fillRect(quarter, 0, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[2]];\r\n          ctx.fillRect(0, quarter, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[3]];\r\n          ctx.fillRect(quarter, quarter, quarter, quarter);\r\n        } else if (coin < 0.5 && coin >= 0.25) {\r\n          ctx.fillStyle = bgColors[numbers4[0]];\r\n          ctx.fillRect(0, 0, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[1]];\r\n          ctx.fillRect(quarter, 0, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[2]];\r\n          ctx.fillRect(0, quarter, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[3]];\r\n          ctx.fillRect(quarter, quarter, quarter, quarter);\r\n        } else if (coin < 0.25) {\r\n          ctx.fillStyle = bgColors[numbers4[0]];\r\n          ctx.fillRect(0, 0, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[1]];\r\n          ctx.fillRect(quarter, 0, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[2]];\r\n          ctx.fillRect(0, quarter, quarter, quarter);\r\n          ctx.fillStyle = bgColors[numbers4[3]];\r\n          ctx.fillRect(quarter, quarter, quarter, quarter);\r\n        }\r\n      }\r\n      ctx.fillRect(0, 0, widthX, widthX); // Draw and fill the rectangle\r\n      ctx.lineWidth = strokeWidth; // Set the stroke width\r\n\r\n    const draw = () => {\r\n      circles.forEach((circle) => {\r\n        ctx.beginPath();\r\n        ctx.arc(circle.x, circle.y, circle.radius, 0, 2 * Math.PI);\r\n        ctx.strokeStyle = strokeColor;\r\n        ctx.fillStyle = 'none';\r\n        ctx.stroke();\r\n      });\r\n    }\r\n\r\n      const doesCircleHaveACollision = (circle) => {\r\n        for (let i = 0; i < circles.length; i++) {\r\n          const existingCircle = circles[i];\r\n          const dx = circle.x - existingCircle.x;\r\n          const dy = circle.y - existingCircle.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n          if (distance <= circle.radius + existingCircle.radius) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n\r\n      const createCircle = () => {\r\n        const x = Math.random() * widthX;\r\n        const y = Math.random() * widthX;\r\n        const radius = minRadius + Math.random() * (widthX - minRadius);\r\n\r\n        const newCircle = { x, y, radius };\r\n\r\n        if (doesCircleHaveACollision(newCircle)) {\r\n          if (createCircleAttempts > 0) {\r\n            createCircleAttempts--;\r\n            createCircle();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        circles.push(newCircle);\r\n      };\r\n\r\n      for (let i = 0; i < totalCircles; i++) {\r\n        createCircle();\r\n      }\r\n\r\n      draw()\r\n    };\r\n\r\n    drawCircles();\r\n  }, [isClicked]);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\nexport default Circles;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}